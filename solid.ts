//? https://github.com/utimur/SOLID_principles/tree/master/src
//! S.O.L.I.D. principles
//! 1. Single responsibility principle
//? принцип единственной ответственности
//* один класс решает одну задачу
//* классы должны быть мало зависимы друг от друга
//* Разбивание на модули(декомпозиция)
//*Проще говоря, принцип предлагает нам проводить границы между модулями так, чтобы изменение в бизнес-логике затрагивало как можно меньше модулей, в идеале — один.

//! 2. Open-closed principle
//? принцип открытости-закрытости
//* классы должны быть открыты для расширения, но закрыты для изменения

//! 3. Liskov substitution principle
//? принцип подстановки Лискова
//* наследуемый класс должен дополнять а не замещать базовый класс
//* нельзя переопределять методы в наследуемом классе

//! 4. Interface segregation principle
//? принцип разделения интерфейса
//* программные сущности не должны зависить от методов которые они не используют
//* интерфейс должен быть представлен как объект и не иметь методов которые не используются

//! 5. Dependency inversion principle
//? принцип инверсии зависимостей
//* модули более высокого уровня не должны зависить от модулей нижего уровня
//* модули нижего уровня должны зависить от абстракции
