// Фасад Секция статьи "Фасад"
// Фасад (англ. facade) прячет за собой сложную логику других модулей, предоставляя более простые методы или функции.

// Он немного похож на адаптер, потому что тоже может делать несовместимое API совместимым, но его основная цель всё же — инкапсулировать часть связанной логики и дать к ней доступ через один метод.

// Пример Секция статьи "Пример"
// Допустим, мы пишем мобильное приложение — пульт для кофеварки.

// Мы хотим добавить кнопку «Нагреть воду» или «Помолоть зерно», но кофеварка предлагает нам более атомарное API: она может по отдельности включить машину, узнать, сколько воды набрано, включить набор воды, отключить набор воды и т. д.

class CoffeeMachine {
    turnOn() {}
    getWaterLevel() {}
    getWater() {}
    turnOnHeater() {}
    turnOffHeater() {}
    getTemperature() {}
    // ...
}

// Тогда для нагрева воды мы можем написать фасад:

const machine = new CoffeeMachine();

function heatWater() {
    machine.turnOn();

    while (machine.getWaterLevel() <= 1000) {
        machine.getWater();
    }

    machine.turnOnHeater();

    if (machine.getTemperature() >= 90) {
        machine.turnOffHeater();
    }
}

heatWater();

// Когда использовать Секция статьи "Когда использовать"
// Используйте фасад, когда вам нужно объединить несколько методов стороннего сервиса или модуля в одну цепочку действий, которая будет повторяться в других местах программы.
