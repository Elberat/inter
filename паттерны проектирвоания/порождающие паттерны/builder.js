// Билдер, или строитель, (англ. builder) позволяет создавать объекты, добавляя им свойства по заданным правилам. Он полезен, когда при создании объекта нужно выполнить много шагов, часть из которых могут быть необязательными.

// Пример Секция статьи "Пример"
// Допустим, мы пишем конструктор кофейных напитков. Все они готовятся на основе эспрессо, но может быть много дополнительных ингредиентов.

class Drink {
    constructor(settings) {
        const { base, milk, sugar, cream } = settings;

        this.base = base;
        this.milk = milk;
        this.sugar = sugar;
        this.cream = cream;
    }
}

// Мы можем добавить молоко, сахар и сливки.

// Чтобы было удобно создавать объекты напитков, мы будем указывать билдеру шаг за шагом — что добавить к кофе:

class DrinkBuilder {
    settings = {
        base: 'espresso',
    };

    addMilk = () => {
        this.settings.milk = true;
        return this;
    };

    addSugar = () => {
        this.settings.sugar = true;
        return this;
    };

    addCream = () => {
        this.settings.cream = true;
        return this;
    };

    addSyrup = () => {
        this.settings.syrup = true;
        return this;
    };

    build = () => new Drink(this.settings);
}

// По умолчанию в настройки мы добавляем только эспрессо, но при вызове методов add...() добавляем в настройки новый ингредиент. При вызове build() возвращаем собранный напиток:

const latte = new DrinkBuilder().addMilk().build();
const withSugarAndCream = new DrinkBuilder().addSugar().addCream().build();

// Обратите внимание, что мы можем собирать методы add...() в цепочку, завершая вызовом build(). Это возможно потому, что каждый из add...() методов возвращает текущий экземпляр билдера.

// ...

addMilk = () => {
    this.settings.milk = true;

    // Возвращаем текущий билдер:
    return this;
};

// Таким образом мы используем полезную функциональность — добавляем ингредиент в настройки, а потом возвращаем this — ссылаемся на себя же, чтобы можно было применить новый метод этого класса.

// Когда использовать Секция статьи "Когда использовать"
// Если в приложении требуется создавать объекты с разными особенностями, или процесс создания объекта делится на отдельные шаги, то билдер помогает не засорять код условиями и проверками.
